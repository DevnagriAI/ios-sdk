// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name DevnagriSdk
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import CommonCrypto
import CoreData
@_exported import DevnagriSdk
import Foundation
import Swift
import SystemConfiguration
import UIKit
import Vision
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ReachabilityError_devNagri : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
  case UnableToGetInitialFlags
}
public class DevnagriNetworkReachability {
  public typealias NetworkReachable = (DevnagriSdk.DevnagriNetworkReachability) -> ()
  public typealias NetworkUnreachable = (DevnagriSdk.DevnagriNetworkReachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: DevnagriSdk.DevnagriNetworkReachability.NetworkStatus, b: DevnagriSdk.DevnagriNetworkReachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case none, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: DevnagriSdk.DevnagriNetworkReachability.Connection, b: DevnagriSdk.DevnagriNetworkReachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: DevnagriSdk.DevnagriNetworkReachability.NetworkReachable?
  public var whenUnreachable: DevnagriSdk.DevnagriNetworkReachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: DevnagriSdk.DevnagriNetworkReachability.Connection {
    get
  }
  public var connection: DevnagriSdk.DevnagriNetworkReachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  convenience public init?(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil)
  @objc deinit
}
extension DevnagriSdk.DevnagriNetworkReachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DevnagriSDK : ObjectiveC.NSObject {
  public typealias InitBlock = (_ isInitialized: Swift.Bool, _ message: Swift.String?) -> Swift.Void
  public typealias TranslatedLanguageBlock = (_ isUpdated: Swift.Bool, _ message: Swift.String) -> Swift.Void
  public static var shared: DevnagriSdk.DevnagriSDK {
    get
  }
  final public var isSdkSubscribed: Swift.Bool
  final public func initSdk(apiKey: Swift.String, updateStringsTime inMinutes: Swift.Int? = nil, completionHandler: @escaping DevnagriSdk.DevnagriSDK.InitBlock)
  final public func updateTranslations(completionHandler: @escaping DevnagriSdk.DevnagriSDK.TranslatedLanguageBlock)
  final public func refreshSubscriptionDetail()
  final public func setMaxRecursionCount(count: Swift.Int)
  final public func setRecursionDurationInSeconds(seconds: Swift.Int)
  @objc deinit
}
extension DevnagriSdk.DevnagriSDK {
  final public func updateAppLocale(code: Swift.String, completionHandler: @escaping DevnagriSdk.DevnagriSDK.TranslatedLanguageBlock)
  final public func getTranslationOfString(sentence: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  final public func getTranslationOfStrings(sentences: [Swift.String], callback: @escaping ([Swift.String]) -> Swift.Void)
  final public func getTranslationsOfDictionary(dictionary: [Swift.String : Swift.String], callback: @escaping ([Swift.String : Swift.String]) -> Swift.Void)
  final public func getTranslationOfDictionary(dict: Foundation.NSDictionary, ignoreKeys arrKeysToIgnore: [Swift.String], enableCache: Swift.Bool = false, callback: @escaping (Any) -> Swift.Void)
  final public func getAllSupportableLanguages(callBack: ([DevnagriSdk.DevnagriSupportingLanguageItem]) -> Swift.Void)
  final public func getCurrentApplicationLanguageCode() -> Swift.String
}
@_hasMissingDesignatedInitializers public class DevnagriSupportingLanguageItem {
  public var language: Swift.String
  public var languageCode: Swift.String
  @objc deinit
}
public func NSLocalizedString(_ key: Swift.String, comment: Swift.String) -> Swift.String
extension ObjectiveC.NSObject {
  public func NSLocalizedString(_ key: Swift.String, tableName: Swift.String? = nil, bundle: Foundation.Bundle = Bundle.main, value: Swift.String = "", comment: Swift.String) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(DevnagriApiCallingInfo) public class DevnagriApiCallingInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DevnagriSdk.DevnagriApiCallingInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DevnagriSdk.DevnagriApiCallingInfo>
  @objc @NSManaged dynamic public var apiType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var apiUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var calledAt: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var languageCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var subscription: Swift.Bool {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DevnagriScreenshot) public class DevnagriScreenshot : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DevnagriSdk.DevnagriScreenshot {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DevnagriSdk.DevnagriScreenshot>
  @objc @NSManaged dynamic public var createdOn: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var identifier: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var screenName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var serverUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uniqueId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var updatedOn: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uploadStatus: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DevnagriSubscriptionInfo) public class DevnagriSubscriptionInfo : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DevnagriSdk.DevnagriSubscriptionInfo {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DevnagriSdk.DevnagriSubscriptionInfo>
  @objc @NSManaged dynamic public var createdOn: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var enableAutomaticScreenshot: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var enableManualScreenshot: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isSubscription: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shouldLogMessage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var status: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DevnagriSupportedLanguage) public class DevnagriSupportedLanguage : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DevnagriSdk.DevnagriSupportedLanguage {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DevnagriSdk.DevnagriSupportedLanguage>
  @objc @NSManaged dynamic public var code: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(DevnagriTranslation) public class DevnagriTranslation : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension DevnagriSdk.DevnagriTranslation {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<DevnagriSdk.DevnagriTranslation>
  @objc @NSManaged dynamic public var key: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var sentence: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var translation: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var translation_language_code: Swift.String? {
    @objc get
    @objc set
  }
}
@available(*, unavailable, renamed: "Connection")
extension DevnagriSdk.DevnagriNetworkReachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension DevnagriSdk.DevnagriNetworkReachability.NetworkStatus : Swift.Hashable {}
extension DevnagriSdk.DevnagriNetworkReachability.Connection : Swift.Equatable {}
extension DevnagriSdk.DevnagriNetworkReachability.Connection : Swift.Hashable {}
